---
title: "Subject-level developmental relationships"
format: html
---

```{r}
suppressPackageStartupMessages(library(here))
suppressPackageStartupMessages(library(psych))
suppressPackageStartupMessages(source(here("helper","common.R")))
library(lavaan)
library(tidySEM)

d_sub <- readRDS(here("cached_intermediates","1_d_sub.Rds"))
d_trial <- readRDS(here("cached_intermediates","1_d_trial.Rds"))
```


# Relations between variables

## Between datasets

```{r}
cor(select(d_sub, age, log_age, rt, log_rt, 
                       short_window_accuracy, long_window_accuracy, 
                       short_window_elogit, long_window_elogit, prod, comp), 
    use = "pairwise.complete.obs") |>
  round(2)
```

Take a look at correlations to select variables. 

```{r}
GGally::ggpairs(select(d_sub, age, log_age, rt, log_rt, 
                       short_window_accuracy, long_window_accuracy, 
                       short_window_elogit, long_window_elogit, prod, comp), 
                progress = FALSE, lower = list(continuous = GGally::wrap("points", alpha = 0.03)))

```

Let's select the most interesting of these. 

```{r, fig.width=9, fig.height=9}
d_sub |>
  select(log_age, log_rt,  
         long_window_accuracy,  prod, comp) |>
GGally::ggpairs(progress = FALSE, 
                lower = list(continuous = GGally::wrap("points", alpha = 0.03)),
                axisLabels = "show") 
 

```

### Controlling for age (between dataset)

```{r}
d_residualized_by_age <- d_sub |>
  select(subject_id, administration_id,log_age,log_rt, long_window_accuracy, prod, comp) |> 
  pivot_longer(cols=c(log_rt,long_window_accuracy,  prod, comp),names_to="measure",values_to="value") |>
  group_by(measure) |> 
  nest() |> 
  mutate(fits = map(data, \(d) lm(value ~ log_age, data = d) |>
                      broom::augment(newdata = d))) |> 
  unnest(fits) |> 
  select(-data)

d_residualized_by_age |>
  select(administration_id, measure, .resid) |>
  pivot_wider(names_from = measure, values_from = .resid) |>
  select(-administration_id) |>
  GGally::ggpairs(progress=FALSE,lower = list(continuous = GGally::wrap("points", alpha = 0.03)))
```

## Within dataset

All the variables. 


```{r}
all_corrs <- d_sub |>
select(dataset_name, age, log_age, rt, log_rt, 
                       short_window_accuracy, long_window_accuracy, 
                       short_window_elogit, long_window_elogit, prod, comp) |>
  group_by(dataset_name) |>
  nest() |>
  mutate(corrs = map(data, ~cor(.x, use = "pairwise.complete.obs")),
         long_corrs = map(corrs, ~pivot_longer(as_tibble(.x) |> 
                                                mutate(variable1 = colnames(.x)), 
                                               -variable1, names_to = "variable2", 
                                               values_to = "r"))) |>
  select(-data, -corrs) |>
  unnest(cols = c(long_corrs))

ggplot(all_corrs, aes(x = variable1, y = r, col = dataset_name)) + 
  geom_point(alpha = .2) + 
  stat_summary(fun.data = "mean_cl_boot", col = "black") +
  coord_flip() + 
  facet_wrap(~variable2)
```

Several variables. 

```{r}
datasets_with_age_variation <- d_trial |>
  group_by(dataset_name) |>
  summarise(age_range = max(age) - min(age)) |>
  filter(age_range >= 4)

d_sub_agevar <- d_sub |>
  filter(dataset_name %in% datasets_with_age_variation$dataset_name)


all_corrs <- d_sub_agevar |>
select(dataset_name, log_age, log_rt, rt,
                       long_window_accuracy, long_window_elogit) |>
  group_by(dataset_name) |>
  nest() |>
  mutate(corrs = map(data, ~cor(.x, use = "pairwise.complete.obs")),
         long_corrs = map(corrs, ~pivot_longer(as_tibble(.x) |> 
                                                mutate(variable1 = colnames(.x)), 
                                               -variable1, names_to = "variable2", 
                                               values_to = "r"))) |>
  select(-data, -corrs) |>
  unnest(cols = c(long_corrs)) |>
  filter(variable1 != variable2, 
         !(variable1 == "rt" & variable2 == "log_rt"), 
         !(variable1 == "log_rt" & variable2 == "rt"),
         !(variable1 == "long_window_accuracy" & variable2 == "long_window_elogit"),
         !(variable1 == "long_window_elogit" & variable2 == "long_window_accuracy"))

ggplot(all_corrs,
       aes(x = variable1, y = r, col = dataset_name)) + 
  geom_point(alpha = .5, pch = 20) +
  stat_summary(fun.data = "mean_cl_boot", aes(group = 1)) +
  geom_hline(yintercept = 0, lty = 2) + 
  # coord_flip() +
  facet_grid(.~variable2, scales = "free_x") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
```

Plot correlations of key variables now.  Annoying to figure out how to remove the upper diagonal...

```{r}
all_corrs <- d_sub_agevar |>
select(dataset_name, log_age, log_rt,
                       long_window_accuracy) |>
  group_by(dataset_name) |>
  nest() |>
  mutate(corrs = map(data, ~cor(.x, use = "pairwise.complete.obs")),
         long_corrs = map(corrs, ~pivot_longer(as_tibble(.x) |> 
                                                mutate(variable1 = colnames(.x)), 
                                               -variable1, names_to = "variable2", 
                                               values_to = "r"))) |>
  select(-data, -corrs) |>
  unnest(cols = c(long_corrs)) |>
  filter(variable1 != variable2)

ggplot(all_corrs,
       aes(x = interaction(variable1, variable2), y = r, col = dataset_name)) + 
  geom_point(alpha = .5, pch = 20) +
  stat_summary(fun.data = "mean_cl_boot", aes(group = 1)) +
  geom_hline(yintercept = 0, lty = 2) + 
  coord_flip() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
```

Hmm, want to think more about  estimating an "average" correlation when the variation in age changes so dramatically between datasets

```{r}
#order by correlation value of log age and long window accuracy
all_corrs_log_age_acc <- all_corrs |> 
  ungroup() |> 
  filter(variable1 == "log_age" & variable2 == "long_window_accuracy") |>
  mutate(dataset_name_ordered= fct_reorder(dataset_name,r))

d_sub_agevar <- d_sub_agevar |> 
  left_join(all_corrs_log_age_acc)

#quick peek at cross-dataset estimates, ranked by strength of correlation
ggplot(d_sub_agevar,aes(log_age,long_window_accuracy))+geom_point()+geom_smooth(method="lm")+facet_wrap(~dataset_name_ordered)
```

### Controlling for age (within dataset)

```{r}
all_corrs_age_residualized <- d_sub_agevar |>
  ungroup() |> 
  #compute variables residualized by age
select(dataset_name, administration_id,subject_id,log_age, log_rt, rt,
                       long_window_accuracy, long_window_elogit,prod) |>
  pivot_longer(cols=c(log_rt, rt,
                       long_window_accuracy, long_window_elogit,  prod),names_to="measure",values_to="value") |>
  group_by(dataset_name,measure) |> 
  nest() |> 
  mutate(fits = map(data, \(d) {if(sum(!is.na(d$value))>0) {lm(value ~ log_age, data = d) |> broom::augment(newdata = d)} })) |>
  unnest(fits) |> 
  select(dataset_name,subject_id,administration_id,measure, .resid) |> 
  rename(resid = .resid) |> 
  pivot_wider(names_from=measure,values_from=resid,names_prefix="resid_") |> 
  #now group by dataset and compute pairwise correlations
  select(-subject_id,-administration_id) |>
  group_by(dataset_name) |>
  nest() |>
  mutate(corrs = map(data, ~cor(.x, use = "pairwise.complete.obs")),
         long_corrs = map(corrs, ~pivot_longer(as_tibble(.x) |> 
                                                mutate(variable1 = colnames(.x)), 
                                               -variable1, names_to = "variable2", 
                                               values_to = "r"))) |>
  mutate(corrs = map(data, ~cor(.x, use = "pairwise.complete.obs")),
         long_corrs = map(corrs, ~pivot_longer(as_tibble(.x) |> 
                                                mutate(variable1 = colnames(.x)), 
                                               -variable1, names_to = "variable2", 
                                               values_to = "r"))) |>
  select(-data, -corrs) |>
  unnest(cols = c(long_corrs)) |>
  filter(variable1 != variable2, 
         !(variable1 == "resid_rt" & variable2 == "resid_log_rt"), 
         !(variable1 == "resid_log_rt" & variable2 == "resid_rt"),
         !(variable1 == "resid_long_window_accuracy" & variable2 == "resid_long_window_elogit"),
         !(variable1 == "resid_long_window_elogit" & variable2 == "resid_long_window_accuracy"))

ggplot(all_corrs_age_residualized,
       aes(x = variable1, y = r, col = dataset_name)) + 
  geom_point(alpha = .5, pch = 20) +
  stat_summary(fun.data = "mean_cl_boot", aes(group = 1)) +
  geom_hline(yintercept = 0, lty = 2) + 
  # coord_flip() +
  facet_grid(.~variable2, scales = "free_x") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
```

# Individual relationships

```{r}
m_rt <- mean(d_sub$rt, na.rm=TRUE)
sd_rt <- sd(d_sub$rt, na.rm=TRUE)
d_sub$factor_rt <- cut(d_sub$rt, 
                           breaks = quantile(d_sub$rt, 
                                             probs = c(0, .25, .5, .75, 1), 
                                             na.rm= TRUE), 
                           labels = c("0-25", "25-50", "50-75", "75-1"))


ggplot(filter(d_sub, !is.na(rt), !is.na(factor_rt)),
       aes(x = age, 
           y = long_window_accuracy, 
           col = factor_rt)) +
  geom_point(alpha = .3) +
  geom_smooth() +
  scale_x_log10() + 
  geom_hline(yintercept = .5, lty = 2)+
  viridis::scale_color_viridis(discrete = TRUE, 
                               name = "RT quantile") + 
  xlab("Age (log months)") + 
  ylab("Accuracy (long window)") + 
  theme(legend.position = "bottom")

```

Broken out by age group.

```{r}

d_sub$age_group <- cut(d_sub$log_age, 
                           breaks = log(c(12,24,36,48,60)), 
                           labels = c("12-24","24-36","36-48","48-60"), 
                           include_lowest = TRUE)


ggplot(filter(d_sub, !is.na(age_group)), 
       aes(x = rt, 
           y = long_window_accuracy, 
           col = age_group)) +
  geom_point(alpha = .3) +
  geom_smooth() +
  geom_hline(yintercept = .5, lty = 2)+
  viridis::scale_color_viridis(discrete = TRUE, 
                               name = "age group")
```

By dataset.

```{r}
ggplot(filter(d_sub, 
              !is.na(rt), !is.na(factor_rt), 
              dataset_name %in% datasets_with_age_variation$dataset_name),
       aes(x = age, 
           y = long_window_accuracy, 
           col = factor_rt)) +
  geom_point(alpha = .3) +
  geom_smooth(se= FALSE, method = "lm") +
  scale_x_log10() + 
  geom_hline(yintercept = .5, lty = 2)+
  viridis::scale_color_viridis(discrete = TRUE, 
                               name = "RT quantile") +
  facet_wrap(~dataset_name) + 
  xlab("Age (log months)") + 
  ylab("Accuracy (long window)")

```

# Dimensionality reduction

The claim of some of the Fernald processing corpus is that there is a second principal component here (namely, processing speed) that is meaningful and relates to later learning outcomes.

## All data


Scree plot

```{r}
d_sub_mat <- d_sub |>
  ungroup() |>
  select(log_age, log_rt, long_window_accuracy) 

d_sub_mat <- d_sub_mat |>
  filter(complete.cases(d_sub_mat)) |>
  as.matrix() 

fa.parallel(d_sub_mat)
```

```{r}
mod1 <- fa(d_sub_mat, 1, rotate = "varimax")
mod1

```




## Production


Scree plot

```{r}
d_sub_mat <- d_sub |>
  ungroup() |>
  select(log_age, log_rt, long_window_elogit, prod) 

d_sub_mat <- d_sub_mat |>
  filter(complete.cases(d_sub_mat)) |>
  as.matrix() 

fa.parallel(d_sub_mat)
```

Factor analysis first. This is probably more appropriate. 

```{r}
mod1 <- fa(d_sub_mat, 1, rotate = "varimax")
mod2 <- fa(d_sub_mat, 2, rotate = "varimax")

summary(mod1)
mod1
```

Make into matrices and look at PCA. 

```{r}

acc_rt_prc <- prcomp(x = d_sub_mat, scale = TRUE)

acc_rt_prc
summary(acc_rt_prc)
ggbiplot::ggbiplot(acc_rt_prc, alpha = .1)
```


## Production within individual datasets


```{r}
d_sub_mat_dataset <- d_sub |>
  filter(dataset_name %in% datasets_with_age_variation$dataset_name) |>
  group_by(dataset_name) |>
  select(dataset_name, log_age, log_rt, long_window_elogit, prod) 

d_sub_mat_grp <- d_sub_mat_dataset |>
  nest() |>
  mutate(complete_data = map(data, ~filter(.x[complete.cases(.x),])),
    mat = as.matrix(complete_data), 
    has_data = map_lgl(complete_data, ~nrow(.x)>0)) |>
  filter(has_data) |>
  mutate(fas = map(mat, ~fa(.x, 1, rotate = "varimax")), 
         f_summary = map(fas, summary), 
         loadings = map(fas, ~tibble(loadings = as.double(loadings(.x)), 
                                     name = rownames(loadings(.x)))))


ls <- d_sub_mat_grp |>
  select(dataset_name, loadings) |>
  unnest(cols = c(loadings))

ggplot(ls, aes(x = name, y = loadings, col = dataset_name)) + 
  geom_point(aes = .5) +
  stat_summary(fun.data = "mean_cl_boot", aes(group = 1)) +
  geom_hline(yintercept = 0, lty = 2) + 
  coord_flip()

```



## Comprehension


```{r}
d_sub_mat_comp <- d_sub |>
  ungroup() |>
  select(log_age, log_rt,  long_window_elogit, comp) 

d_sub_mat_comp <- d_sub_mat_comp |>
  filter(complete.cases(d_sub_mat_comp)) |>
  as.matrix() 

```

Scree.

```{r}
fa.parallel(d_sub_mat_comp)
```

Factor analysis

```{r}
mod1_comp <- fa(d_sub_mat_comp, 1, rotate = "varimax")
mod2_comp <- fa(d_sub_mat_comp, 2, rotate = "varimax")

summary(mod1_comp)
loadings(mod1_comp)
```

PCA.

```{r}
acc_rt_prc_comp <- prcomp(x = d_sub_mat_comp, scale = TRUE)

acc_rt_prc_comp
summary(acc_rt_prc_comp)
ggbiplot::ggbiplot(acc_rt_prc_comp, alpha = .1)
```

# CFA models

```{r}

d_cfa <- d_sub |>
             rename(`accuracy` = long_window_accuracy) |>
             mutate(accuracy = scale(accuracy), 
                    log_age = scale(log_age), 
                    log_rt = scale(log_rt)) |>
  select(accuracy, log_age, log_rt) 

d_cfa <- d_cfa[complete.cases(d_cfa), ]

fa_model <-  "F1  =~ log_age + log_rt + accuracy"
fit <- cfa(fa_model, d_cfa, std.lv=TRUE)

summary(fit)
a <- graph_sem(model = fit)+ theme(panel.background = element_rect(fill = "white"))
```
Production. 

```{r}
d_cfa_prod <- d_sub |>
             rename(`accuracy` = long_window_accuracy) |>
             mutate(accuracy = scale(accuracy), 
                    log_age = scale(log_age), 
                    log_rt = scale(log_rt), 
                    prod = scale(prod)) |>
  select(accuracy, log_age, log_rt, prod) 

d_cfa_prod <- d_cfa_prod[complete.cases(d_cfa_prod), ]

fa_model_prod <-  "F1  =~ log_age + log_rt + accuracy + prod"
fit_prod <- cfa(fa_model_prod, d_cfa_prod, std.lv=TRUE)

summary(fit_prod)
b <- graph_sem(model = fit_prod) + 
  theme(panel.background = element_rect(fill = "white"))
b
```

Comprehension.

```{r}
d_cfa_comp <- d_sub |>
             rename(`accuracy` = long_window_accuracy) |>
             mutate(accuracy = scale(accuracy), 
                    log_age = scale(log_age), 
                    log_rt = scale(log_rt), 
                    comp = scale(comp)) |>
  select(accuracy, log_age, log_rt, comp) 

d_cfa_comp <- d_cfa_comp[complete.cases(d_cfa_comp), ]

fa_model_comp <-  "F1  =~ log_age + log_rt + accuracy + comp"
fit_comp <- cfa(fa_model_comp, d_cfa_comp, std.lv=TRUE)

summary(fit_comp)
c <- graph_sem(model = fit_comp,
            layout = get_layout(x = fit_comp, layout_algorithm = "layout_as_star")) + 
    theme(panel.background = element_rect(fill = "white"))
c
```

Plot these as a grid. 

```{r}
plot_grid(a,b,c, nrow = 1, labels = c("A","B","C"))
ggsave(here("figures","sem.png"), width = 25, height = 4)
```

## Measurement invariance across age? 

```{r}
fa_model <-  "F1  =~ log_age + log_rt + accuracy"
fit_younger <- cfa(fa_model, 
                   filter(d_cfa, log_age <= median(log_age)),
                   std.lv=TRUE)

graph_sem(model = fit_younger)
```


# Longitudinal data

```{r}
longitudinal <- d_sub |>
  group_by(dataset_name, subject_id) |>
  count() |>
  filter(n > 1)

d_sub_long <- d_sub |>
  filter(subject_id %in% longitudinal$subject_id) |>
  group_by(subject_id) |>
  arrange(administration_id) |>
  mutate(admin_num = 1:n(), 
         delta_t = c(0,diff(age)))
  
ggplot(d_sub_long, 
       aes(x = delta_t, fill = as.factor(admin_num))) +
  geom_histogram() + 
  facet_wrap(~dataset_name)
```

Longitudinal data with CDI is just FMW2013 right now. 

```{r}
fmw <- filter(d_sub_long, dataset_name == "fmw_2013") |>
  mutate(t = ifelse(age < 23, "t1","t2")) |>
  group_by(subject_id, t) |>
  summarise(age = mean(age), 
            log_rt = mean(log_rt), 
            prod = mean(prod), 
            long_window_accuracy = mean(long_window_accuracy),
            delta_t = mean(delta_t)) |>
  pivot_wider(names_from = "t", 
              values_from = c("age","log_rt","prod","long_window_accuracy", "delta_t"))

summary(lm(prod_t2 ~ long_window_accuracy_t1 * log_rt_t1 + age_t2, 
             data = fmw))
```

## Without CDIs

```{r}
ggplot(d_sub_long, 
       aes(x = age, y = long_window_accuracy, group = subject_id, col = dataset_name)) +
  geom_line(alpha = .3, position = position_jitter(width = .1, height = 0)) + 
  geom_smooth(aes(group = 1)) + 
  scale_y_log10() + 
  geom_hline(lty = 2, yintercept = .5)

```

```{r}
ggplot(filter(d_sub_long, n_trials_rt > 3),
       aes(x = age, y = log_rt, group = subject_id, col = dataset_name)) +
  geom_line(alpha = .3, position = position_jitter(width = .1, height = 0)) + 
  geom_smooth(aes(group = 1)) + 
  scale_y_log10() 
```

## Model comparison of growth forms within kids



# Conclusions


