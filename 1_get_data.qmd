---
title: "Data getter for peekbank analysis"
format: html
---

# Load data

```{r}
library(here)
source(here("helper","common.R"))
source(here("helper","rt_helper.R"))
```


FIXME: we ideally want to figure out a more sustainable way to deal with this downstream dependency.

We load the frame-level data. 

```{r}
load(file = here("..", "peekbank-method", "cached_intermediates", "1_d_aoi.Rds"))
```


# Trial level data frame

We have been worrying about windows, but let's just do two windows:

1. classic short: 200 - 2000
2. ICC maximizing long: 500 - 4000 - our analysis suggests this maximizes stability of individual differences (albeit not necessarily differences in language)

```{r}
d_trial <- d_aoi |>
  mutate(short_window = t_norm > 200 & t_norm <= 2000,
         long_window = t_norm > 500 & t_norm <= 4000) |>
  group_by(dataset_name, dataset_id, administration_id, 
           trial_id, age, target_label, distractor_label) |>
  summarise(short_window_accuracy = mean(correct[short_window], na.rm=TRUE),
            long_window_accuracy = mean(correct[long_window], na.rm=TRUE),
            short_window_prop_data = sum(!is.na(correct[short_window]), na.rm = TRUE) /
              length(correct[short_window]),
            long_window_prop_data = sum(!is.na(correct[long_window]), na.rm = TRUE) / 
              length(correct[long_window]),
            short_window_target = sum(correct[short_window], na.rm=TRUE),
            long_window_target = sum(correct[long_window], na.rm=TRUE),
            short_window_distractor = sum(!correct[short_window], na.rm=TRUE),
            long_window_distractor = sum(!correct[long_window], na.rm=TRUE)) |>
  mutate(short_window_elogit = log((short_window_target + .5) / (short_window_distractor + .5)),
         long_window_elogit = log((long_window_target + .5) / (long_window_distractor + .5)))
```

Compute RTs, relying on the RLE workflow from the shiny app. (We tested this extensively back in the `peekbank-shiny` repo). 

```{r}
d_rle <- d_aoi |>
  filter(any(t_norm == 0), # must have data at 0
         t_norm >= 0) |> # only pass data after 0
  group_by(administration_id, trial_id, trial_order) |>
  reframe(lengths = rle(aoi)$lengths, 
            values = rle(aoi)$values) 

d_rt <- d_rle %>%
  group_by(administration_id, trial_id, trial_order) %>%
  nest() %>%
  mutate(data = lapply(data, get_rt)) %>%
  unnest(cols = c(data))
```

Join this back into the main data frame. We keep raw RTs with all shifts, but `rt` will refer to only D-T shifts. 

```{r}
d_trial_rt_unfiltered <- d_trial |>
  left_join(d_rt) |>
  mutate(raw_rt = rt,
         rt = ifelse(shift_type == "D-T", rt, NA),
         log_rt = log(rt)) 
```

# Filtering

Check out age distribution.

```{r}
ages <- d_trial_rt |>
  group_by(administration_id) |>
  summarise(age = mean(age)) 


ggplot(ages, aes(x = age)) + 
  geom_histogram()

sum(ages < 12)
```

We have NA and NaN (average of all NAs) throughout. 
- rows with zero data in both windows should be removed
- elogits for zero data in one window should be NA'd out. 
- NaN should be NA

Also, let's get rid of trials with very limited amounts of data. Classically we remove trials with less than 50% data. 

We are also going to NA-out RTs if we have less than 50% data in the short window, just because we think that's going to mess up the computation. 

Finally, it will make life easier for now if we filter kids >= 12months. We can revisit this. 

```{r}
d_trial <- d_trial_rt_unfiltered |>
  filter(!(is.na(short_window_prop_data) & is.na(long_window_prop_data)), 
         !(short_window_prop_data < .5 & long_window_prop_data < .5), 
         age >= 12) |>
  mutate(across(contains("window"), ~ ifelse(is.na(.x), NA, .x))) |>
  mutate(short_window_accuracy = ifelse(short_window_prop_data >= .5, short_window_accuracy, NA),
         long_window_accuracy = ifelse(long_window_prop_data >= .5, long_window_accuracy, NA),
         rt = ifelse(short_window_prop_data >= .5, rt, NA),
         short_window_elogit = ifelse(short_window_prop_data >= .5, short_window_elogit, NA), 
         long_window_elogit = ifelse(long_window_prop_data >= .5, long_window_elogit, NA))

```

# Descriptives


Now let's look at a summary. 

```{r}
d_trial |>
  ungroup() |>
  summarise(n = n(), 
            avg_acc_short = mean(short_window_accuracy, na.rm=TRUE),
            avg_acc_long = mean(long_window_accuracy, na.rm=TRUE),
            avg_rt = mean(rt, na.rm=TRUE),
            nas_in_acc_short = mean(is.na(short_window_accuracy)),
            nas_in_acc_long = mean(is.na(long_window_accuracy)),
            avg_prop_data_short = mean(short_window_prop_data, na.rm=TRUE),
            avg_prop_data_long = mean(long_window_prop_data, na.rm=TRUE),
            prop_rts = mean(!is.na(rt))) |>
  pivot_longer(everything(), names_to = "variable", values_to = "value") |>
  kable(digits = 2)
```

And dataset-wise. 

```{r}
d_trial |>
  group_by(dataset_name) |>
  summarise(n = n(), 
            avg_acc_short = mean(short_window_accuracy, na.rm=TRUE),
            avg_acc_long = mean(long_window_accuracy, na.rm=TRUE),
            avg_rt = mean(rt, na.rm=TRUE),
            nas_in_acc_short = mean(is.na(short_window_accuracy)),
            nas_in_acc_long = mean(is.na(long_window_accuracy)),
            average_prop_data_short = mean(short_window_prop_data, na.rm=TRUE),
            average_prop_data_long = mean(long_window_prop_data, na.rm=TRUE),
            prop_rts = mean(!is.na(rt))) |>
  arrange(desc(n)) |>
  kable(digits = 2)
```

Look at some histograms. 

Short window. 

```{r}
ggplot(d_trial, 
       aes(x = short_window_accuracy)) +
  geom_histogram() + 
  facet_wrap(~dataset_name, scales = "free_y")
```


Long window.

```{r}
ggplot(d_trial, 
       aes(x = long_window_accuracy)) +
  geom_histogram() + 
  facet_wrap(~dataset_name, scales = "free_y")
```
RTs. 

```{r}
ggplot(d_trial, 
       aes(x = rt)) +
  geom_histogram() + 
  facet_wrap(~dataset_name, scales = "free_y")
```

# Create subject-level RDS as well

```{r}
d_sub <- d_trial |>
  group_by(dataset_name, administration_id, age) |>
  summarise(across(c(contains("_window"),"rt","log_rt"), ~mean(.x, na.rm=TRUE)))
```

# Save data

```{r}
saveRDS(d_trial, here("cached_intermediates","1_d_trial"))
saveRDS(d_sub, here("cached_intermediates","1_d_sub"))
```

